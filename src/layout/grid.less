/*
---
name: Grid
category: Layout
---

## Grid system
It's a grid. You know how grids work. Even if you don't, you'll understand in no time.

12 columns of almost endless possibilities at your fingertips.

**It's very easy !**

### Containers

`.container` class is a 1100px-wide centered container.

### Rows

`.row` is used to denote a new row. Pretty easy.

### Auto layout

By default, `.col` classes allow for an easy auto-layout : they all take an equal space within the row.

```grid-auto.html
<div class="container">
    <div class="row">
        <div class="col bg-blue-200">3 blocks</div>
        <div class="col bg-blue-200">3 blocks</div>
        <div class="col bg-blue-200">3 blocks</div>
    </div>
    <div class="row">
        <div class="col bg-blue-300">6 blocks</div>
        <div class="col bg-blue-300">6 blocks</div>
        <div class="col bg-blue-300">6 blocks</div>
        <div class="col bg-blue-300">6 blocks</div>
        <div class="col bg-blue-300">6 blocks</div>
        <div class="col bg-blue-300">6 blocks</div>
    </div>
</div>
```

### Specified width

You can also specify a block width by using `.col-{n}` classes, *with n ∈ [1...12]*. You can also mix & match by specifing only one or two colomn widths and letting the others in auto mode :
```grid-width.html
<div class="container">
    <div class="row">
        <div class="col-4 bg-blue-200">col-4</div>
        <div class="col-3 bg-blue-200">col-3</div>
        <div class="col-5 bg-blue-200">col-5</div>
    </div>
    <div class="row">
        <div class="col bg-blue-300">auto</div>
        <div class="col bg-blue-300">auto</div>
        <div class="col-4 bg-blue-300">col-4</div>
        <div class="col bg-blue-300">auto</div>
        <div class="col bg-blue-300">auto</div>
        <div class="col bg-blue-300">auto</div>
    </div>
</div>
```

### Responsive classes

The grid provides 4 breakpoints : `sm`, `md`, `lg` and `xl`. You can use the corresponding `.col-{sm|md|lg|xl}-{n}` (*with n ∈ [1...12]*) to easily make responsive layouts.
For example, if you want a layout with 3 blocks of 4 columns on desktop and stack them on medium widths :

```grid-responsive.html
<div class="container">
    <div class="row">
        <div class="col-4 col-sm-12 bg-blue-200">col-4 col-sm-12</div>
        <div class="col-4 col-sm-12 bg-blue-200">col-4 col-sm-12</div>
        <div class="col-4 col-sm-12 bg-blue-200">col-4 col-sm-12</div>
    </div>
</div>
```

### Offsets

You can offset a block to the right by using `.offset-{sm|md|lg|xl}-{n}` (*with n ∈ [0...12]*) depending on the screen resolution you're targeting.
Please note that special cancelling classes `.offset-{ø|sm|md|lg|xl}-0` exist, allowing you to reset offset on specific resolutions. This allows for offsetting a block on desktop and not on mobile for example.

```grid-offset.html
<div class="container">
    <div class="row">
        <div class="col-6 col-sm-12 offset-sm-0 offset-6 bg-blue-200">col-6 offset-md-6 col-sm-12 offset-sm-0</div>
    </div>
</div>
```

### Vertical alignement

By default, blocks on the same row will take up an equal height. You can opt for a different behaviour by using the `.align-items-start`, `.align-items-center` and `.align-items-end` classes on the `.row` div.

```grid-valign.html
<div class="container">
    <div class="row align-items-center">
        <div class="col-6 bg-blue-200"><div style="min-height: 200px">Huge block</div></div>
        <div class="col-6 bg-blue-200">Smoll centered block</div>
    </div>
</div>
```

*/

//Breakpoints values
@sm: 560px;
@md: 760px;
@lg: 960px;
@xl: 1100px;

@breakpoints: sm, md, lg, xl;

@columns: 12;
@gutter: 25px;

.container {
    max-width: @xl;
    margin: auto;
    overflow: hidden;
}

.row {
    display: flex;
    flex-wrap: wrap;
    margin: 0 -@gutter;
}

//Row vertical alignments
.align-items-start {
    align-items: flex-start;
}

.align-items-center {
    align-items: center;
}

.align-items-end {
    align-items: flex-end;
}

//Auto columns
.col {
    flex-basis: 0;
    flex-grow: 1;
    margin: 0 @gutter;
}

//Generic class
[class^="col-"] {
    flex-grow: 0;
    margin: 0 @gutter;
}

//col-{n} generator
.col(@i) {
    @width: ((100%/@columns) * @i);

    flex-basis: calc(@width - 2 * @gutter);
    width: calc(@width - 2 * @gutter);
}

//offset-{n} generator
.offset(@i) {
    @width: ((100%/@columns) * @i);

    margin-left: calc(@width + @gutter);
}

//Generating col-{n} classes
each(@columns, {
    .col-@{index} {
        .col(@index);
    }

    .offset-@{index} {
        .offset(@index);
    }
});

//Generating responsive classes col-{sm|md|lg|xl}-{n}
//And offset classes offset-{sm|md|lg|xl}-{n}
each(@breakpoints, .(@bk, @_k, @_i) {
    @media screen and (max-width: @@bk) {
        each(@columns, {
            .col-@{bk}-@{index} {
                .col(@index);
            }

            .offset-@{bk}-@{index} {
                .offset(@index);
            }
        });

        .offset-@{bk}-0 {
            margin-left: @gutter;
        }
    }
});
